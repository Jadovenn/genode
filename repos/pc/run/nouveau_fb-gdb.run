assert_spec x86_64

set depot_archives   { }
set build_components { }

lappend depot_archives [depot_user]/src/[base_src]
lappend depot_archives [depot_user]/src/init
lappend depot_archives [depot_user]/src/acpi_drv
lappend depot_archives [depot_user]/src/platform_drv
lappend depot_archives [depot_user]/src/pci_decode
lappend depot_archives [depot_user]/src/report_rom


set build_components {
	drivers/framebuffer/nouveau/pc
	test/framebuffer
}

if {[have_include power_on/qemu]} {
	append build_components { drivers/uart }
	lappend depot_archives [depot_user]/src/monitor
	lappend depot_archives [depot_user]/src/sandbox
}

build $build_components

append config {
<config verbose="yes" prio_levels="2">
	<parent-provides>
		<service name="ROM"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
		<service name="TRACE"/>
	</parent-provides>
	<default-route>
		<service name="Timer"> <child name="timer"/> </service>
		<service name="LOG"> <parent/> </service>
		<service name="PD">  <parent/> </service>
		<service name="CPU"> <parent/> </service>
		<service name="ROM"> <parent/> </service>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>
	<default caps="100"/>

	<start name="report_rom" caps="100">
		<resource name="RAM" quantum="2M"/>
		<provides>
			<service name="ROM" />
			<service name="Report" />
		</provides>
		<config>
			<policy label="pci_decode -> system"    report="acpi_drv -> acpi"/>
			<policy label="intel_fb_drv -> intel_opregion" report="acpi_drv -> intel_opregion"/>
			<policy label="platform_drv -> devices" report="pci_decode -> devices"/>
		</config>
		<route>
			<service name="LOG"> <parent/> </service>
			<service name="PD">  <parent/> </service>
			<service name="CPU"> <parent/> </service>
			<service name="ROM"> <parent/> </service>
		</route>
	</start>

	<start name="acpi_drv" caps="250">
		<resource name="RAM" quantum="6M"/>
		<route>
			<service name="IO_MEM"> <parent/> </service>
			<service name="LOG">    <parent/> </service>
			<service name="PD">     <parent/> </service>
			<service name="RM">     <parent/> </service>
			<service name="CPU">    <parent/> </service>
			<service name="ROM">    <parent/> </service>
			<service name="Report"> <child name="report_rom"/> </service>
		</route>
	</start>

	<start name="pci_decode" caps="350">
		<resource name="RAM" quantum="2M"/>
		<route>
			<service name="Report">
				<child name="report_rom"/> </service>
			<service name="ROM" label="system">
				<child name="report_rom"/> </service>
			<service name="IO_MEM"> <parent/> </service>
			<service name="LOG">    <parent/> </service>
			<service name="PD">     <parent/> </service>
			<service name="RM">     <parent/> </service>
			<service name="CPU">    <parent/> </service>
			<service name="ROM">    <parent/> </service>
		</route>
	</start>

	<start name="platform_drv" caps="100" managing_system="yes">
		<resource name="RAM" quantum="2M"/>
		<provides> <service name="Platform"/> </provides>
		<route>
			<service name="ROM" label="devices"> <child name="report_rom"/> </service>
			<service name="IRQ">     <parent/> </service>
			<service name="IO_MEM">  <parent/> </service>
			<service name="IO_PORT"> <parent/> </service>
			<service name="ROM">     <parent/> </service>
			<service name="PD">      <parent/> </service>
			<service name="CPU">     <parent/> </service>
			<service name="LOG">     <parent/> </service>
			<service name="Timer"> <child name="timer"/> </service>
		</route>
		<config>
			<policy label_suffix="pc_nouveau_fb_drv -> " info="yes">
				<pci class="VGA"/>
				<pci class="ISABRIDGE"/>
			</policy>
			<policy label_prefix="intel_gpu_drv" info="yes">
				<pci class="VGA"/>
				<pci class="ISABRIDGE"/>
			</policy>
		</config>
	</start>

	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Timer"/></provides>
	</start>

}

append_if [have_include power_on/qemu] config {
		<start name="terminal">
			<binary name="pc_uart_drv"/>
			<resource name="RAM" quantum="2M"/>
			<provides>
				<service name="Terminal"/>
				<service name="Uart"/>
			</provides>
			<config>
				<policy label_prefix="monitor" uart="1"/>
			</config>
		</start>
}

append config {

	<start name="monitor" caps="1000">
		<resource name="RAM" quantum="100M"/>
		<config>
			<parent-provides>
				<service name="LOG"/>
				<service name="PD"/>
				<service name="CPU"/>
				<service name="ROM"/>
				<service name="Platform"/>
				<service name="Timer"/>
			</parent-provides>
			<default caps="100"/>

			<monitor>
				<policy label="pc_nouveau_fb_drv" wait="yes" wx="yes"/>
			</monitor>

			<start name="pc_nouveau_fb_drv">
				<resource name="RAM" quantum="8M"/>
				<route>
					<any-service> <parent/> </any-service>
				</route>
			</start>

		</config>
	</start>
}
## Close the config

append config {
</config>
}

create_boot_directory
import_from_depot $depot_archives
install_config $config

build_boot_image [build_artifacts]

set port 5555

if {[have_include power_on/qemu]} {

	set host "localhost"

	# qemu config
	append qemu_args " -display none "

	if {[have_board rpi3]} {
		# connect comport 0 with TCP port $port
		append qemu_args " -serial chardev:uart "
		# connect comport 1 to stdio
		append qemu_args " -serial stdio "
	} else {
		# connect comport 0 to stdio append qemu_args " -serial stdio "
		append qemu_args " -serial stdio "
		# connect comport 1 with TCP port $port
		append qemu_args " -serial chardev:uart "
	}

	append qemu_args " -chardev socket,id=uart,port=$port,host=$host,server=on,wait=off,ipv4=on "

	run_genode_until {.*monitor ready*} 30

} else {
	run_genode_until forever
}

set genode_id [output_spawn_id]

# GDB loads symbols from 'debug/ld.lib.so'
if { [have_spec nova] } {
	exec ln -sf ld-nova.lib.so debug/ld.lib.so
} elseif { [have_spec hw] } {
	exec ln -sf ld-hw.lib.so debug/ld.lib.so
}

# sequence of GDB commands to execute at startup
set gdb_cmds ""
append gdb_cmds {-ex "set non-stop on" }
append gdb_cmds {-ex "target extended-remote $host:$port" }

# avoid pagination prompts in autopilot test
append gdb_cmds {-ex "set pagination off" }

# avoid color escape sequences in autopilot test
append gdb_cmds {-ex "set style enabled off" }

# don't ask for y/n when loading a new symbol file
append gdb_cmds {-ex "set interactive-mode off" }
# set search path for shared libraries
append gdb_cmds {-ex "set solib-search-path debug" }
# set a breakpoint in the 'binary_ready_hook_for_gdb' function
append gdb_cmds {-ex "b binary_ready_hook_for_gdb" }
# continue execution until the breakpoint triggers
append gdb_cmds {-ex "c" }
# delete the 'binary_ready_hook_for_gdb' breakpoint
append gdb_cmds {-ex "delete 1" }
# switch to the 'ep' thread
append gdb_cmds {-ex "thread 2" }
# load the symbols of the test application
append gdb_cmds "-ex \"file debug/pc_nouveau_fb_drv\" "

puts "GDB_CMD: [gdb] debug/ld.lib.so $gdb_cmds"

# run GDB
exec [terminal] -e "bash -lc \'[gdb] debug/ld.lib.so $gdb_cmds\'" &

interact -i $genode_id
